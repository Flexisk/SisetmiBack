// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Context;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Dominio.Pacientes.PacienteAfiliacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AseguradoraId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DtFechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.Property<long>("RegimenId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<string>("VcOtraAseguradora")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteAfiliacion");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteCaso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("BComfirmadoSifilisGestacional")
                        .HasMaxLength(20)
                        .HasColumnType("bit");

                    b.Property<string>("ClasificacionSifilis")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DtFecha")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<long>("PacienteId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<int>("VcNumeroCaso")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteCaso", (string)null);
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteContacto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BarrioId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartamentoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DtFechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocalidadId")
                        .HasColumnType("bigint");

                    b.Property<long>("PacienteId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaidId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpzId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<string>("VcDireccionPrincipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VcDireccionSecundaria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VcTelefono1")
                        .HasColumnType("int");

                    b.Property<int>("VcTelefono2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteContacto");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteDiagnostico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AntecedenteItsId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("AntecedentePenicilinaId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<bool>("BRequierePruebaNoTreponemica")
                        .HasColumnType("bit");

                    b.Property<long>("CondicionActualId")
                        .HasMaxLength(200)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DtFechaDiagnostico")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtResultadoPruebaNoTreponemica")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<long>("FormulaObstetricaId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("IpsDiagnosticaId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("ModificacionDefinicionCasoId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("PacienteCasoId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("ResultadoPruebaNoTriponemica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TipoAntecedenteId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("TipoPruebaNoTriponemica")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VcDescripcionAntecedente")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VcEdadGestacional")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteCasoId");

                    b.ToTable("PacienteDiagnostico", (string)null);
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteDiagnosticoPruebaTreponemica", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("BResultadoPruebaTreponemica")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DtResultadoPruebaTreponemica")
                        .HasColumnType("datetime2");

                    b.Property<long>("PacienteDiagnosticoId")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoPruebaTriponemica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteDiagnosticoId");

                    b.ToTable("PacienteDiagnosticoPruebaTreponemica");
                });

            modelBuilder.Entity("Dominio.Pacientes.Pacientes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DtFechaNacimineto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoDocumentoId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VcDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VcPrimerApellido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VcPrimerNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VcSegundoApellido")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VcSegundoNombre")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteAfiliacion", b =>
                {
                    b.HasOne("Dominio.Pacientes.Pacientes", "Pacientes")
                        .WithMany("PacienteAfiliacion")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pacientes_Afiliacion");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteCaso", b =>
                {
                    b.HasOne("Dominio.Pacientes.Pacientes", "pacientes")
                        .WithMany("PacienteCaso")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pacientes");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteContacto", b =>
                {
                    b.HasOne("Dominio.Pacientes.Pacientes", "Pacientes")
                        .WithMany("PacienteContacto")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pacientes_Contacto");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteDiagnostico", b =>
                {
                    b.HasOne("Dominio.Pacientes.PacienteCaso", "pacientecaso")
                        .WithMany("pacientediagnostico")
                        .HasForeignKey("PacienteCasoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pacientecaso");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteDiagnosticoPruebaTreponemica", b =>
                {
                    b.HasOne("Dominio.Pacientes.PacienteDiagnostico", "pacientediagnostico")
                        .WithMany("pacientediagnosticopruebatreponemica")
                        .HasForeignKey("PacienteDiagnosticoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pacientes_Diagnostico");

                    b.Navigation("pacientediagnostico");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteCaso", b =>
                {
                    b.Navigation("pacientediagnostico");
                });

            modelBuilder.Entity("Dominio.Pacientes.PacienteDiagnostico", b =>
                {
                    b.Navigation("pacientediagnosticopruebatreponemica");
                });

            modelBuilder.Entity("Dominio.Pacientes.Pacientes", b =>
                {
                    b.Navigation("PacienteAfiliacion");

                    b.Navigation("PacienteCaso");

                    b.Navigation("PacienteContacto");
                });
#pragma warning restore 612, 618
        }
    }
}
